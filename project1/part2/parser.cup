/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal           PLUS, LPAREN, RPAREN, /*LCURLY, */RCURLY, COMMA, IF, ELSE, PREFIX, SUFFIX, HACK;
terminal String    IDENTIF, STRING_LITERAL;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal        program;
non terminal        str_conc_inner_call, inner_call, inner_args, inner_comma_args, call, function, arguements_c, comma_args_c, arguements, comma_args, implementation, call_list, body, str_call, str_declaration, string, str_concatenation_call, stmnt, condition, ifstmnt;

/**
 *  Precedence Declarations
//  */
precedence left PLUS;

/**
 *  The Grammar Rules
 */

program                     ::= function:fs call_list:cl {: System.out.println("public class Main {\n\n\tpublic static void main(String[] args) {\n\t\t"+cl+"\n\t}\n\n\t"+fs+"\n}"); :}
;

function                    ::= function:f IDENTIF:t LPAREN arguements:args HACK implementation:im {: RESULT = "public static String "+t+"("+args+")"+im+"\n\t"+f; :}
                              | {: RESULT = ""; :}
;

arguements                  ::= str_declaration:s comma_args:ca {: RESULT = "String "+s+ca; :}
                              | {: RESULT = ""; :}
;

comma_args                  ::= COMMA str_declaration:s comma_args:ca {: RESULT = ", String "+s+ca; :}
                              | {: RESULT = ""; :}
;

implementation              ::= body:b RCURLY {: RESULT = "{\n\t\treturn "+b+";\n\t}\n"; :}
;

body                        ::= string:s {: RESULT = ""+s; :}
;

call_list                   ::= call:c call_list:cl {: RESULT = "System.out.println("+c+");\n\t\t"+cl; :}
                              | {: RESULT = ""; :}
;

call                        ::= IDENTIF:t LPAREN arguements_c:args {: RESULT = ""+t+"("+args+")"; :}
;

arguements_c                ::= str_call:s comma_args_c:ca RPAREN {: RESULT = ""+s+ca; :}
                              | RPAREN {: RESULT = ""; :}
;

comma_args_c                ::= COMMA str_call:s comma_args_c:ca {: RESULT = ", "+s+ca; :}
                              | {: RESULT = ""; :}
;

inner_call                  ::= IDENTIF:t LPAREN inner_args:args {: RESULT = ""+t+"("+args+")"; :}
;

inner_args                  ::= string:s inner_comma_args:ca RPAREN {: RESULT = ""+s+ca; :}
                              | RPAREN {: RESULT = ""; :}
;

inner_comma_args            ::= COMMA string:s inner_comma_args:ca {: RESULT = ", "+s+ca; :}
                              | {: RESULT = ""; :}
;

/**********************************************************************************/

ifstmnt                     ::= IF LPAREN string:s1 condition:c RPAREN string:st1 ELSE string:st2 {: RESULT = "("+c+s1+") ? ("+st1+") : ("+st2+"))"; :}
;

condition                   ::= PREFIX string:s2 {: RESULT = "("+s2+")"+".startsWith("; :}
                              | SUFFIX string:s2 {: RESULT = "("+s2+")"+".endsWith("; :}
;

// stmnt                       ::= ifstmnt:ifs {: RESULT = ifs; :}
//                               | string:s {: RESULT = s; :}
// ;

string                      ::= STRING_LITERAL:str str_conc_inner_call:conc {: RESULT = "\""+str+"\""+conc; :}
                              | inner_call:ic str_conc_inner_call:conc {: RESULT = ""+ic+conc; :}
                              | str_declaration:sd str_conc_inner_call:conc {: RESULT = ""+sd+conc; :}
                              | ifstmnt:ifs str_conc_inner_call:conc {: RESULT = ""+ifs+conc; :}
;

str_conc_inner_call         ::= PLUS string:s {: RESULT = "+"+s; :}
                              | {: RESULT = ""; :}
;

str_declaration             ::= IDENTIF:t {: RESULT = t; :}
;

str_call                    ::= STRING_LITERAL:str str_concatenation_call:conc {: RESULT = "\""+str+"\""+conc; :}
                              | call:c str_concatenation_call:conc {: RESULT = ""+c+conc; :}
;

str_concatenation_call      ::= PLUS str_call:s {: RESULT = "+"+s; :}
                              | {: RESULT = ""; :}
;
