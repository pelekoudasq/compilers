/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal           PLUS, LPAREN, RPAREN, LBRACKET, RBRACKET, COMMA, IF, ELSE, PREFIX, SUFFIX;
terminal String    TOKEN, STRING_LITERAL;        // our scanner provides numbers as integers

/*  Non terminals */
non terminal        program;
non terminal        function, header, arguements, comma_args, implementation, str_concatenation, body, string, stmnt, condition, ifstmnt;

/**
 *  Precedence Declarations
//  */
// precedence left PLUS, MINUS;
// precedence left TIMES;
// precedence left UMINUS;

/**
 *  The Grammar Rules
 */

program             ::= function:fs {: System.out.println("public class Main {\n\t"+fs+"\n\tpublic static void main(String[] args) {\n\t\treturn \"yes\";\n\t}\n}"); :}
;

function            ::= header:h implementation:im function:f{: RESULT = ""+h+im+"\n\t"+f; :}
                      | {: RESULT = ""; :}
;

header              ::= TOKEN:t LPAREN arguements:args RPAREN {: RESULT = ""+t+"("+args+")"; :}
;

arguements          ::= string:s comma_args:ca {: RESULT = ""+s+ca; :}
                      | {: RESULT = ""; :}
;

comma_args          ::= COMMA string:s comma_args:ca {: RESULT = ", "+s+ca; :}
                      | {: RESULT = ""; :}
;

implementation      ::= LBRACKET body:b RBRACKET {: RESULT = "{\n\t\treturn "+b+";\n\t}\n"; :}
;

body                ::= ifstmnt:ifs {: RESULT = ifs; :}
                      | string:s str_concatenation:conc {: RESULT = ""+s+conc; :}
;

str_concatenation   ::= PLUS string:s str_concatenation:c {: RESULT = "+"+s+c; :}
                      | {: RESULT = ""; :}
;


/**********************************************************************************/

ifstmnt         ::= IF LPAREN string:s1 condition:c RPAREN stmnt:st1 ELSE stmnt:st2 {: RESULT = ""+c+s1+") ? ("+st1+") : ("+st2+")"; :}
;

condition       ::= PREFIX string:s2 {: RESULT = "("+s2+")"+".startsWith("; :}
                  | SUFFIX string:s2 {: RESULT = "("+s2+")"+".endsWith("; :}
;

stmnt           ::= ifstmnt:ifs {: RESULT = ifs; :}
                  | string:s {: RESULT = s; :}
;

string          ::= STRING_LITERAL:str {: RESULT = "\""+str+"\""; :}
                  | TOKEN:t {: RESULT = t; :}
;
